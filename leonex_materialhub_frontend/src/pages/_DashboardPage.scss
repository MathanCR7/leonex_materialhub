// src/scss/pages/_dashboard.scss
@use "../scss/utils/variables" as var;
@use "../scss/utils/mixins" as mix;

.dashboard-page {
  animation: fadeIn 0.4s ease-out;

  .stats-grid {
    display: grid;
    gap: var.$spacer-4;
    grid-template-columns: 1fr;
    margin-bottom: var.$spacer-5;

    @include mix.screen-breakpoint(sm) {
      grid-template-columns: repeat(2, 1fr);
    }
    @include mix.screen-breakpoint(lg) {
      grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
      gap: var.$spacer-5;
    }
  }

  .third-party-dashboard-layout {
    display: flex;
    flex-direction: column;
    gap: var.$spacer-5;
  }

  .financial-grid {
    .stat-card {
      border-left: 4px solid;
      background: var.$surface-color;

      .stat-card-info h4 {
        color: var.$text-secondary;
      }
      .stat-card-info p {
        font-weight: var.$font-weight-bold;
        color: var.$text-primary;
      }
      .stat-card-icon {
        opacity: 0.8;
      }
      &.bg-primary {
        border-color: var.$primary;
        .stat-card-icon {
          color: var.$primary;
        }
      }
      &.bg-success-light {
        border-color: var.$success;
        .stat-card-icon {
          color: var.$success;
        }
      }
      &.bg-warning-light {
        border-color: var.$warning;
        .stat-card-icon {
          color: var.$warning;
        }
      }
      &.bg-danger-light {
        border-color: var.$danger;
        .stat-card-icon {
          color: var.$danger;
        }
      }
    }
  }

  .charts-container {
    display: grid;
    gap: var.$spacer-5;
    grid-template-columns: 1fr;

    @include mix.screen-breakpoint(xl) {
      grid-template-columns: repeat(auto-fit, minmax(420px, 1fr));
    }
  }

  // --- FIX APPLIED HERE ---
  .chart-card {
    // Declarations are moved BEFORE the mixin include.
    display: flex;
    flex-direction: column;
    min-width: 0; // Keeping this for extra safety

    // The card-style mixin is now called last.
    // Padding is passed as an argument for cleaner code.
    @include mix.card-style($padding: var.$spacer-5);

    h3 {
      @include mix.flex-center($justify: flex-start);
      gap: var.$spacer-3;
      margin-top: 0;
      margin-bottom: var.$spacer-5;
      font-size: 1.1rem;
      font-weight: var.$font-weight-semibold;
      color: var.$text-secondary;
      flex-shrink: 0; // Prevent the title from shrinking
    }

    .chart-wrapper {
      flex-grow: 1;
      width: 100%;
      min-height: 350px;
    }

    .no-chart-data {
      @include mix.flex-center;
      flex-grow: 1;
      min-height: 250px;
      color: var.$text-muted;
      font-style: italic;
      font-size: var.$font-size-sm;
    }
  }

  // --- FIX APPLIED HERE ---
  .welcome-card {
    // All declarations are moved BEFORE the mixin include.
    @include mix.flex-center(center, center);
    flex-direction: column;
    text-align: center;
    gap: var.$spacer-4;
    background: linear-gradient(135deg, var.$surface-color, var.$surface-light);

    // The card-style mixin is now called last, with padding as an argument.
    @include mix.card-style($padding: var.$spacer-5);

    // Nested rules that come after are perfectly fine.
    @include mix.screen-breakpoint(md) {
      padding: var.$spacer-6;
    }

    svg {
      color: var.$primary;
    }
    h2 {
      margin-top: var.$spacer-2;
    }
    p {
      max-width: 50ch;
      color: var.$text-secondary;
    }
  }

  // --- NO FIX NEEDED HERE ---
  // This rule was already correct because it only has nested rules (h3, ul)
  // after the include, not declarations.
  .recent-materials-card {
    @include mix.card-style;
    h3 {
      @include mix.flex-center(flex-start);
      gap: var.$spacer-3;
      margin-bottom: var.$spacer-4;
      font-size: 1.2rem;
      color: var.$text-primary;
    }

    ul {
      list-style: none;
      li {
        display: flex;
        flex-direction: column;
        gap: var.$spacer-2;
        padding: var.$spacer-3 0;
        border-bottom: 1px solid var.$border-color-light;
        transition: background-color 150ms ease-in-out;
        padding-left: var.$spacer-3;
        border-left: 3px solid transparent;

        &:last-child {
          border-bottom: none;
          padding-bottom: 0;
        }
        &:hover {
          background-color: var.$surface-light;
          border-left-color: var.$primary;
        }

        .recent-material-header {
          font-weight: var.$font-weight-medium;
          color: var.$primary;
          strong {
            color: var.$text-primary;
          }
        }
        .recent-material-details {
          font-size: var.$font-size-sm;
          color: var.$text-secondary;
          display: flex;
          flex-wrap: wrap;
          gap: var.$spacer-3 var.$spacer-4;
          span {
            @include mix.flex-center($justify: flex-start);
            gap: var.$spacer-2;
          }
        }
      }
    }
  }
}

.stats-grid > div[style*="cursor: pointer"] {
  .stat-card {
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    &:hover {
      transform: translateY(-5px);
      box-shadow: var.$box-shadow-lg;
    }
  }
}

.recharts-tooltip-wrapper {
  .recharts-default-tooltip {
    background-color: rgba(30, 41, 59, 0.95) !important;
    border-color: rgba(45, 58, 78, 0.5) !important;
    border-radius: var.$border-radius !important;
    box-shadow: var.$box-shadow-lg;

    .recharts-tooltip-label {
      color: var.$surface-color;
      font-weight: var.$font-weight-semibold;
    }
    .recharts-tooltip-item-name,
    .recharts-tooltip-item-separator {
      color: var.$sidebar-text !important;
    }
    .recharts-tooltip-item-value {
      font-weight: var.$font-weight-bold;
      color: var.$surface-color;
    }
  }
}

.recharts-pie-label-text {
  fill: #fff;
  font-weight: bold;
  font-size: 1rem;
  text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.6);
}
